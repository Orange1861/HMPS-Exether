# For on_actions launched by the code itself.

# Fires when bookmark initialization is complete but players are still in the lobby 
# At this point we do not know who the players are
# No root scope set
on_game_started = {
	effect = {
		# Memento Mori
		every_country = {
			every_interest_group = {
				leader = {
					if = {
						limit = {
							NOT = {
								has_variable = memento_mori_immunity
							}
						}
						set_variable = {
							name = memento_mori_immunity
							years = 5
						}
					}
				}
			}			
		}
	}
}

# Fires after everyone enters the game from the lobby for the first time for each campaign
# At this point we DO know who the players are
# No root scope set
on_game_started_after_lobby = {
	effect = {
		# Game Rule: No Dynamic Naming
		if = {
			limit = {
				has_game_rule = no_dynamic_naming
			}
			every_state = {
				reset_state_name = yes
			    reset_hub_names = yes
			}
		}
		# The Ripper
		every_country = {
			if = {
				limit = {
					is_player = yes
				}
				random = {
					chance = 10

					set_variable = var_jack_ripper_possible
				}
			}			
		}
	}
}

# No root scope set
on_monthly_pulse = {
	effect = {
		every_character_in_exile_pool = {
			limit = {
				popularity <= -100
			}
			kill_character = yes
		}

		every_character_in_jail = { # Music too loud? Right to jail. Right away. Driving too fast? Jail. Slow? Jail. You undercook fish? Believe it or not, jail.
			save_scope_as = prisoner_scope
			change_variable = { name = prison_time_var subtract = 1 }
			if = {
				limit = {
					NOT = {
						exists = var:prison_country
					}
				}
				kill_character = yes
			}
			else_if = {
				limit = {
					exists = var:prison_country
					var:prison_time_var <= 0
				}
				free_character_from_void = yes
				owner ?= {
					post_notification = prisoner_out_of_jail
				}
				remove_variable = prison_country
				remove_variable = prison_time_var
			}
		}


		# Used to keep track of Council Republics for the purpose of the Red Scare.
		# Our thanks to Brute for reporting this.
		clear_global_variable_list = aes_country_list
		
		every_country = {
			limit = {
				has_law = law_type:law_council_republic
				country_rank > rank_value:minor_power
			}
			add_to_global_variable_list = {
				name = aes_country_list
				target = THIS
			}
		}
	}
	on_actions = {
		calculate_veil_top_damage
		calculate_blue_riband_scores
	}
}

on_yearly_pulse = { 

}

# Root = Country
on_monthly_pulse_country = {
	events = {
		communism.8 # Red Army
		#colonial_administration_events.2 # African Colony Radicals

		# Exile Agitators Events
		yeet_agitator_events.1
		yeet_agitator_events.2
		yeet_agitator_events.3

		# Comte
		positivism.1

		#Veil Superevents
		veil_events.1
		veil_events.2
		veil_events.3

		#Beauty in Bloom
		beauty_in_bloom.1
		
		# Set Hierarchy Events
		set_hierarchy_event.1 # Sets British Indian Caste System
		set_hierarchy_event.2 # Replaces British Indian Caste System with Default
	}

	effect = {
		trigger_event = { id = unable_to_enact.1 }

		if = {
			limit = {
				this = {
					has_variable = veil_damage
				}
			}
			change_global_variable = {
				name = veil_integrity_var
				add = var:veil_damage
			}
			set_variable = {
				name = veil_damage
				value = country_veil_damage 
			}
			change_global_variable = {
				name = veil_integrity_var
				subtract = var:veil_damage
			}
		}

		if = {
			limit = {
				is_country_type = colonial # The colonial country type, for now, is only used for colonies whilst they are subjects of another power
				is_subject = no
			}
			set_country_type = recognized
		}
		

	}
	on_actions = { # delay ensures events won't fire simultaneously
		coup_monthly_events
		delay = { days = 4 }
		calculate_arcana_surplus 
		fund_lobbies_monthly_events
		calculate_adventurer_coverage_deficit
		buramog_cleanup
		delay = { days = 8 }
		blue_riband_monthly_events
	}
}



on_yearly_pulse_country = {
	effect = {
		remove_retainers_effect = yes
		# POLITICAL ENGAGEMENT CHECK
		if = {
			limit = {
				NOT = {
					has_variable = political_engagement_trade_union_pops
				}
			}
			set_variable = {
				name = political_engagement_trade_union_pops
				value = 0.5
			}
			if = {
				limit = {
					has_technology_researched = labor_movement
				}
				change_variable = {
					name = political_engagement_trade_union_pops
					add = 0.5
				}
			}
			if = {
				limit = {
					has_technology_researched = political_agitation
				}
				change_variable = {
					name = political_engagement_trade_union_pops
					add = 1
				}
			}
		}

		if = {
			limit = {
				NOR = {
					has_variable = gov_petition_fired
					has_variable = gov_petition_cooldown
					has_modifier = modifier_successfully_met_petition_legitimacy
					any_interest_group = {
						has_modifier = modifier_failed_to_meet_petition
					}
					has_journal_entry = je_government_petition
					is_revolutionary = yes
					is_secessionist = yes
				}
				ig_desires_laws_for_petition = yes
			}
			if = {
				limit = {
					has_variable = gov_petition_coin_toss
				}
				random_list = {
					1 = {
						trigger = {
							any_interest_group = {
								is_in_government = yes
								is_marginal = no
								any_preferred_law = {
									law_is_valid_for_ig_petition = yes
								}
							}
						}
						set_variable = { name = gov_petition_cooldown years = 10 }
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.1 }
					}
					1 = {

					}
				}
				remove_variable = gov_petition_coin_toss
			}
			else = {
				random_list = {
					1 = {
						trigger = {
							any_interest_group = {
								is_in_government = yes
								is_marginal = no
								any_preferred_law = {
									law_is_valid_for_ig_petition = yes
								}
							}
						}
						set_variable = { name = gov_petition_cooldown years = 10 }
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.1 }
					}
					9 = {

					}
				}
			}
		}

		remove_mutagen_central = yes
	}
	on_actions = { # delay ensures events won't fire sidmultaneously
		on_memento_mori # IG leader death
		on_yearly_events
		delay = { days = 2 }
		bp1_misc_yearly_events
		delay = { days = 3 }
		exiles_yearly_events
		delay = { days = 8 }
		historical_agitators_yearly_events
		famine_yearly_events
		delay = { days = 13 }
		slavery_abolition_yearly_events
		delay = { days = 21 }
		lobby_yearly_events
		ep1_misc_yearly_events
		vampiric_administration_remover
		craggadari_damacy #craggedwyn company land removal script
		# rvc_blood_tithes
	}
}

on_half_yearly_pulse_country = {
	effect = {
		if = {
			limit = {
				#has_technology_researched = gantry_cranes
				OR = {
					has_journal_entry = je_blue_riband
					has_journal_entry = je_oceanliner
				}
			}
			set_variable = {
				name = blue_riband_point_local
				value = blue_riband_point
			}
			if = {
				limit = {
					var:blue_riband_score < var:blue_riband_point_local
				}
				set_variable = {
					name = blue_riband_score
					value = var:blue_riband_point_local
				}
			}
		}
	}

	on_actions = { # delay ensures events won't fire simultaneously
		on_half_yearly_events
		delay = { days = 4 }
		silkworm_half_yearly_events
		delay = { days = 14 }
		korea_half_yearly_events
		delay = { days = 17 }
		lobbies_proposals_half_yearly_events
		delay = { days = 20 }
		movement_half_yearly_events
	}
}

on_five_year_pulse_country = {
	events = {
		generals.1
	}

}


on_decade_pulse_country = {
	random_events = {
		chance_to_happen = 5
		1 = plague.1
	}
}

# Only fires for countries with Elections enabled
on_monthly_pulse_country_elections = {
	on_actions = {
		elections_monthly_events
	}
}

on_half_yearly_pulse_country_elections = { }
on_yearly_pulse_country_elections = { }
on_five_year_pulse_country_elections = {}
on_decade_pulse_country_elections = {}

# Root = Character
on_monthly_pulse_character = {
	effect = {
		if = {
			limit = {
				AND = {
					has_trait = trait_child
					age >= define:NCharacters|ADULT_AGE
				}
			}
			remove_trait = trait_child
			add_random_trait = personality
		}
		if = {
			limit = {
				has_ideology = ideology:ideology_traditionalist_minoritarian
				owner.religion ?= religion
			}
			if = {
				limit = {
					owner.religion = {
						has_discrimination_trait = uriks_pantheon
					}
				}
				set_ideology = ideology:ideology_ecumenical_traditionalist
			}
			else = {
				set_ideology = ideology:ideology_traditionalist
			}
			
		}
		else_if = {
			limit = {
				OR = {
					has_ideology = ideology:ideology_ecumenical_traditionalist
					has_ideology = ideology:ideology_traditionalist
				}
				
				NOT = {
					owner.religion ?= religion
				}
			}
			set_ideology = ideology:ideology_traditionalist_minoritarian
		}
	}
}
on_yearly_pulse_character = {
	on_actions = {
		on_wounded
	}
}
on_half_yearly_pulse_character = {}
on_five_year_pulse_character = {}
on_decade_pulse_character = {}

# Root = State
on_monthly_pulse_state = {
	random_events = {
	}
	on_actions = {
		build_soulwrought
		diggy_diggy_dwarf
		sunstationinator
	}
}

on_half_yearly_pulse_state = {
	random_events = {
		delay = { days = 23 }
		1 = paralegal_discrimination.1
	}
}

on_yearly_pulse_state = {
	random_events = {
		chance_to_happen = 20
		10 = oil_rush.3
		10 = oil_rush.4
		10 = goldrush.5
	}
	on_actions = {
		pop_auto_assimilate
		soulwrought_homelandinator #this could be a five year
		mutant_homelander
		mutant_homelander_2
		mutagen_medicine_state
	}
}
on_five_year_pulse_state = {}
on_decade_pulse_state = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {

	}
}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_won = {

}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_lost = {}

# Root = Building
on_building_built = {
	effect = { 
		if = {
			limit = {
				is_building_type = building_soulwrought_assembly_plant
			}
			set_variable = {
				name = soulwrought_assemble_count
				value = modifier:state_soulwrought_assembled_add
			}
		}
		if = {
			limit = {
				is_building_type = building_sunstation
			}
			set_variable = {
				name = sunstation_progress_count
				value = modifier:state_sunstation_progress_add
			}
			set_variable = sunstation_desc_var
		}
		if = {
			limit = {
				OR = {
					is_building_type = building_collapsed_godsbane_vault
					is_building_type = building_renovated_godsbane_vault
					}
			}
			set_variable = {
				name = dwarf_digging_count
				value = modifier:state_diggy_diggy_dwarf_add
			}
		}
		if = {
			limit = {
				is_building_type = building_questing_office
			}
		}
		if = {
			limit = {
				is_building_type = building_underways
			}
			state = {
				state_region = {
					add_arable_land = 4
				}	
			}
		}
	}	
}


# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
		effect = {
			if = {
				limit = {
					is_building_type = building_underways
				}
				state = {
					state_region = {
						add_arable_land = 4
					}	
				}
			}
		}
	}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

# Root = The applicable country
# scope:technology = The technology type they started to research
on_research_technology_started = {
	effect = {
		if = {
			limit = {
				has_journal_entry = je_tutorial_research_technology
			}
			je:je_tutorial_research_technology = {
				set_target_technology = scope:technology
			}
			set_variable = tut_began_new_research
		}
	}
}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {
	effect = {
		if = {
			limit = {
				has_variable = grand_exhibition_points_change
			}
			change_variable = {
				name = grand_exhibition_points_change
				add = 3
			}
		}
		if = {
			limit = {
				has_game_started = yes
			}
			post_notification = acquired_technology_notification
		}
		if = {
			limit = {
				is_player = yes
				has_technology_researched = pumpjacks
				NOT = { has_variable = first_oil_discovered }
			}
			set_variable = first_oil_discovered
			if = {
				limit = {
					any_scope_state = {
						has_potential_resource = bg_oil_extraction
					}
				}
				random_scope_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
			else_if = {
				limit = {
					any_country = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
				}
				random_country = {
					limit = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
					random_scope_state = {
						limit = {
							has_potential_resource = bg_oil_extraction
						}
						force_resource_discovery = bg_oil_extraction
					}
				}
			}
			else = {
				random_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
		}

		if = {
			limit = {
				has_game_started = yes
				NOT = { has_variable = labor_movement_discovered }
				has_technology_researched = labor_movement
			}
			set_variable = labor_movement_discovered
			change_variable = {
				name = political_engagement_trade_union_pops
				add = 0.5
			}
		}
		if = {
			limit = {
				has_game_started = yes
				NOT = { has_variable = political_agitation_discovered }
				has_technology_researched = political_agitation
			}
			set_variable = political_agitation_discovered
			change_variable = {
				name = political_engagement_trade_union_pops
				add = 1
			}
		}
	}

	events = {
		#blue_riband.1
    	#blue_riband.101
	}
}

# Root = The applicable country
# scope:technology = The technology type that has started to spread to them
on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires when a diplomatic play is started
# root = The diplomatic play that has been started
# scope:initiator = Initiator of the play
# scope:target = Target of the play
on_diplomatic_play_started = {
	effect = {
		#Add unification code here
		if = {
			limit = { is_diplomatic_play_type = dp_unify_gavkhan }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = GAV }
				}

				scope:initiator = { annex = prev }
			}
		}	
		if = {
			limit = { is_diplomatic_play_type = dp_unify_thaloria }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = TLA }
				}

				scope:initiator = { annex = prev }
			}
		}	
		if = {
			limit = { is_diplomatic_play_type = dp_unify_khus }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = NEK }
				}

				scope:initiator = { annex = prev }
			}
		}	
	}
}

# Root = Character
on_character_creation = {
	effect = {
		if = {
			limit = {
				NOT = { has_variable = memento_mori_immunity }
			}
			set_variable = {
				name = memento_mori_immunity
				years = 10
			}			
		}
		if = {
			limit = {
				has_ideology = ideology:ideology_traditionalist_minoritarian
				owner.religion ?= religion
			}
			if = {
				limit = {
					owner.religion = {
						has_discrimination_trait = uriks_pantheon
					}
				}
				set_ideology = ideology:ideology_ecumenical_traditionalist
			}
			else = {
				set_ideology = ideology:ideology_traditionalist
			}
		}
		else_if = {
			limit = {
			OR = {
				has_ideology = ideology:ideology_traditionalist
				has_ideology = ideology:ideology_ecumenical_traditionalist
			}
				NOT = {
					owner.religion ?= religion
				}
			}
			set_ideology = ideology:ideology_traditionalist_minoritarian
		}
		if = { #avian caste enforcement
			limit = {
				exists = owner
				owner = { 
					OR = {
						has_law = law_type:law_avian_caste_enforced
						has_law = law_type:law_avian_caste_codified
					}
				}
					is_historical = no
					OR = {
						has_role = politician
						has_role = general
						has_role = admiral
					}
					OR = {
						is_interest_group_type = ig_intelligentsia
						is_interest_group_type = ig_rural_folk
					}
				}
				random_list = {
					50 = {
						change_character_culture = cu:whitefeather
					}
					35 = {
						change_character_culture = cu:saglithan
					}
					15 = {
						change_character_culture = cu:cliffpercher
					}
				}
		}

		if = {
			limit = {
				has_ideology = ideology:ideology_nihilist
			}
			change_character_religion = rel:atheist
		}

		if = {
			limit = {
				exists = owner
				owner = { 
					OR = {
						has_law = law_type:law_west_avian_caste_enforced
						has_law = law_type:law_west_avian_caste_codified
					}
				}
				has_culture = cu:whitefeather
			}
			random_list = {
				40 = {}
				60 = {
					change_character_religion = rel:sandspeaker_viticist
				}
			}
			
		}

		if = { #avian caste enforcement ##the politician side of this works
			limit = {
				exists = owner
				owner = { 
					OR = {
						has_law = law_type:law_avian_caste_enforced
						has_law = law_type:law_avian_caste_codified
					}
				}
					is_historical = no
					OR = {
						has_role = politician
						has_role = general
						has_role = admiral
					}
					OR = {
						is_interest_group_type = ig_devout
						is_interest_group_type = ig_industrialists
						is_interest_group_type = ig_petty_bourgeoisie
						is_interest_group_type = ig_mages
						is_interest_group_type = ig_armed_forces
					}
				}
				random_list = {
					60 = {
						change_character_culture = cu:whitefeather
					}
					40 = {
						change_character_culture = cu:saglithan
					}
				}
		}
		if = { #avian caste enforcement
			limit = {
				exists = owner
				owner = { 
					OR = {
						has_law = law_type:law_avian_caste_enforced
						has_law = law_type:law_avian_caste_codified
					}
				}
					is_historical = no
					OR = {
						has_role = politician
						has_role = general
						has_role = admiral
					}
					OR = {
						is_interest_group_type = ig_landowners
					}
				}
				change_character_culture = cu:whitefeather
		}

		if = { #west avian caste enforcement
			limit = {
				exists = owner
				owner = { 
					OR = {
						has_law = law_type:law_west_avian_caste_enforced
						has_law = law_type:law_west_avian_caste_codified
					}
				}
					is_historical = no
					OR = { 
						has_role = politician
						has_role = general
						has_role = admiral
					}

					OR = {
						is_interest_group_type = ig_landowners
						is_interest_group_type = ig_mages
						is_interest_group_type = ig_armed_forces
					}
				}
				random_list = {
					40 = {
						change_character_culture = cu:whitefeather
					}
					60 = {
						change_character_culture = cu:cliffpercher
					}
				}
		}

		if = { #west avian caste enforcement
			limit = {
				exists = owner
				owner = { 
					OR = {
						has_law = law_type:law_west_avian_caste_enforced
						has_law = law_type:law_west_avian_caste_codified
					}
				}
					is_historical = no
					OR = {
						has_role = politician
						has_role = general
						has_role = admiral
					}
					OR = {
						is_interest_group_type = ig_devout
						is_interest_group_type = ig_industrialists
						is_interest_group_type = ig_petty_bourgeoisie
					}
				}
				random_list = {
					40 = {
						change_character_culture = cu:whitefeather
					}
					60 = {
						change_character_culture = cu:cliffpercher
					}
				}
		}
	}
}

# Root = Character
on_character_death = {
	effect = {
		
		### Force-generating female rulers if something goes wrong
		if = {
			limit = {
				is_ruler = yes
				owner = {
					NOT = {
						any_scope_character = {
							is_heir = yes
						}
					}
				}
			}
			if = {
				limit = { 
					owner = {
						has_law = law_type:law_matriarchy
					}
				}
				owner = {
					create_character = {
						template = female_default
					}
				}
			}
		}
		if = {
			limit = {
				NOT = { has_variable = beauty_in_bloom_kingmaker }
				has_role = politician
				interest_group = {
					is_interest_group_type = ig_devout
					is_marginal = no
				}
				owner = {
					in_election_campaign = no
					country_has_voting_franchise = yes
					OR = {
						has_journal_entry = je_beauty_in_bloom
						has_modifier = beauty_in_bloom_modifier
					}
				}
			}
			owner = {
				trigger_event = { id = beauty_in_bloom.5 days = 1 }
			}
		}

		#Handle retainer death
		handle_retainer_death = yes

	}
}

# Root = Character
on_new_ruler = {
	effect = {
		if = {
			limit = {
				owner = {
					NOT = {
						has_variable = hide_ruler_change_notification
					}
				}
			}
			post_notification = new_ruler
		}
	}
}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default

		this = {
			save_scope_as = in_default_country
		}

		every_cobelligerent_in_war = {
			post_notification = cobelligerent_in_default_notification
		}

		every_enemy_in_war = {
			post_notification = enemy_in_default_notification
		}
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_call_in_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_call_in_obligation = {
	effect = {
		post_proposal = proposal_break_pact_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_overlord_decrease_autonomy = {
	effect = {
		post_notification = diplomatic_action_overlord_decrease_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_overlord_increase_autonomy = {
	effect = {
		post_notification = diplomatic_action_overlord_increase_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_subject_increase_own_autonomy = {
	effect = {
		post_notification = diplomatic_action_subject_increase_own_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {
	effect = {
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Treaty
on_treaty_proposed = {
	effect = {
		post_proposal = proposal_treaty
	}
}

# Root = Country
on_treaty_proposal_declined = {
	effect = {
		post_notification = treaty_proposal_declined
	}
}

# Root = Treaty
on_treaty_entered_into_force = {
	effect = {
		post_notification = treaty_entered_into_force
	}
}

# Root = Treaty
# scope:withdrawing_country = Withdrawing Country
# scope:non_withdrawing_country = Non-Withdrawing Country
on_country_withdrawn_from_treaty = {
	effect = {
		post_notification = country_withdrawn_from_treaty
	}
}

# Root = Country
on_treaty_dissolved = {
	effect = {
		post_notification = treaty_dissolved
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {
	effect = {
		calculate_arcanas = yes
		if = {
			limit = {
				scope:target ?= {
					OR = {
						country_has_primary_culture = cu:soulwrought
					}
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
			}
			scope:target ?= {
				trigger_event = { id = slave_revolt_events.1 days = 0 }
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {
	effect = {
		calculate_arcanas = yes
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_company_subject = {
	effect = {
		activate_law = law_type:law_presidential_republic
		activate_law = law_type:law_oligarchy
		activate_law = law_type:law_racial_segregation
		activate_law = law_type:law_extraction_economy
		activate_law = law_type:law_colonial_exploitation
		activate_law = law_type:law_no_schools
		activate_law = law_type:law_no_health_system
		activate_law = law_type:law_censorship
		activate_law = law_type:law_no_workers_rights
		activate_law = law_type:law_child_labor_allowed
		activate_law = law_type:law_no_social_security
		activate_law = law_type:law_migration_controls
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {
	effect = {
		calculate_arcanas = yes
	}
}

# Root = Country
on_country_formed = {
	effect = {
		calculate_arcanas = yes
		#Add custom unification events here later
		if = {
			limit = {
				c:GAV ?= ROOT
			}
		}
		if = {
			limit = {
				c:TQL ?= ROOT
			}
			trigger_event = { id = salt_waste_narrative_events.8 popup = yes }
		}
		else = {
			trigger_event = { id = formation.17 popup = yes }
		}
		
	}
}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {
	#Notification seems to fire from code.
	events = {
		goldrush.1
		goldrush.6
		oil_rush.1
		oil_rush.6
		rubber_events.1
		rubber_events.2
	}
}

# Root = State
on_resource_depleted = {
	effect = {
		state_region = {
			post_notification = resource_depleted
		}
	}
	events = {
		goldrush.2
		goldrush.7
	}
}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
	effect = {
		set_variable = {
            name = recently_lost_war
            days = 1825
            value = yes
        }
	}
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			days = short_modifier_time
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Formation
on_mobilized_army = {
	effect = {
	}
}

# Root = Formation
on_demobilized_army = {
	effect = {
	}
}

# Root = Character
on_mobilized_general = {
}

# Root = Character
on_demobilized_general = {
}

# Root = Diplomatic Play
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Diplomatic Play
# country = Country switched to
# previous = Country switched from
on_diplo_play_switch_sides = {

}

# Root = Diplomatic Play
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}


# Root = Diplomatic Play
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer = {
	effect = {
		post_proposal = proposal_reverse_sway_offer
	}
}

# Root = Diplomatic Play
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_accepted = {
	effect = {
		post_notification = reverse_sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Diplomatic Play
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_rejected = {
	effect = {
		post_notification = reverse_sway_offer_rejected
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand = {
	effect = {
		post_proposal = proposal_diplomatic_demand
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_accepted = {
	effect = {
		post_notification = diplomatic_demand_accepted
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_rejected = {
	effect = {
		post_notification = diplomatic_demand_rejected
	}
}

# Root = Building
on_production_method_changed = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_change_production_method
					je:je_tutorial_change_production_method.target = root
				}
				set_variable = has_changed_production_method
			}
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment of any law begins
on_law_enactment_started = {
	effect = {
		if = {
			limit = {
				has_law = law_type:law_monarchy
				OR = {
					is_enacting_law = law_type:law_presidential_republic
					is_enacting_law = law_type:law_parliamentary_republic
					is_enacting_law = law_type:law_council_republic
				}
			}
			set_variable = {
				name = abolishing_monarchy_var
				value = 0
			}
			add_journal_entry = { type =  je_abolish_monarchy }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is success
on_law_checkpoint_success = {
	effect = {
		add_enactment_phase = 1
		if = {
			limit = {
				enacting_any_law = yes
			}
			trigger_event = { id = law_notification.4 days = 0 }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		10 = laws.1
		10 = children_rights_events.1
		10 = free_speech_laws.1
		10 = free_speech_laws.2
		10 = labor_rights.1
		10 = labor_rights.4
		10 = children_rights_events.4
		10 = welfare_laws.1
		10 = welfare_laws.4
		10 = welfare_laws.8
		10 = migration_laws.1
		10 = migration_laws.4
		10 = bureaucracy.2
		10 = colonization.1
		10 = colonization.3
		10 = rights_of_women_laws.1
		10 = rights_of_women_laws.2
		10 = internal_security_events.2
		10 = slavery_law_events.1
		10 = slavery_law_events.4
		10 = laws_police.1
		10 = anarchy.3
		10 = tax.2
		10 = tax.5
		10 = theocracy.1
		10 = citizenship_laws.1
		10 = citizenship_laws.4
		10 = education_laws.1
		10 = education_laws.4
		10 = distribution_of_power_laws.1
		10 = council_republic_law_events.1
		10 = distribution_of_power_laws.4
		10 = monarchy_law_events.1
		10 = monarchy_law_events.2
		10 = economy_laws.1
		10 = economy_laws.4
		10 = conscription_laws.1
		10 = republic_laws.1
		10 = internal_security_events.4
		10 = healthcare_laws.1
		10 = healthcare_laws.4
		10 = anti_state_religion.1
		10 = distribution_of_power_laws.7
		10 = distribution_of_power_laws.10
		10 = rights_of_women_laws.5
		10 = agitators_law_events.3
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.17
		10 = agitators_law_events.21
		10 = agitators_law_events.22
		10 = agitators_law_events.23
		10 = agitators_law_events.24
		10 = agitators_law_events.25
		10 = agitators_law_events.26
		10 = agitators_law_events.27
		10 = agitators_law_events.28
		10 = agitators_law_events.29
		10 = agitators_law_events.30
		10 = state_atheism.2
		10 = state_atheism.6
		2 = generic_laws.1
		2 = generic_laws.4
		2 = generic_laws.7
		2 = generic_laws.10
		2 = ig_petitions.4 #Devout want State Religion
		2 = ig_petitions.7 #Intelligentsia want free speech
		2 = ig_petitions.19 #Armed forces want conscription
		2 = ig_petitions.22 #Petite-Bourgeoisie want Restricted Citizenship
		1 = law_notification.1
		10 = single_party_state.1
		5 = single_party_state.6
		5 = single_party_state.7
		10 = land_ownership_law_events.2
		10 = land_ownership_law_events.5
		10 = land_ownership_law_events.8
		10 = luddite_law_events.1
		10 = luddite_law_events.4
		10 = agitator_legal_events.21
		10 = agitator_legal_events.22
		10 = agitator_legal_events.23
		10 = agitator_legal_events.24
		10 = agitator_legal_events.25
		10 = agitator_legal_events.26
		10 = agitator_legal_events.27
		10 = agitator_legal_events.28
		10 = agitator_legal_events.29
		10 = agitator_legal_events.30
		10 = land_ownership_law_events.13
		10 = land_ownership_law_events.16
		10 = technocracy.2
		100 = nihilism.13
		10 = corporate_state.1
		10 = corporate_state.4
		50 = utilitarian.8
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		10 = children_rights_events.2
		10 = free_speech_laws.5
		10 = labor_rights.2
		10 = labor_rights.5
		10 = children_rights_events.6
		10 = welfare_laws.2
		10 = welfare_laws.5
		10 = welfare_laws.9
		10 = migration_laws.2
		10 = migration_laws.5
		10 = bureaucracy.3
		10 = colonization.1
		10 = free_speech_laws.5
		10 = free_speech_laws.6
		10 = internal_security_events.3
		10 = slavery_law_events.2
		10 = slavery_law_events.5
		10 = laws_police.2
		10 = anarchy.2
		10 = tax.3
		10 = tax.6
		10 = theocracy.2
		10 = citizenship_laws.2
		10 = citizenship_laws.5
		10 = education_laws.2
		10 = education_laws.5
		10 = distribution_of_power_laws.2
		10 = council_republic_law_events.2
		10 = distribution_of_power_laws.5
		10 = monarchy_law_events.3
		10 = economy_laws.2
		10 = economy_laws.5
		10 = isolation.2
		10 = conscription_laws.2
		10 = republic_laws.2
		10 = internal_security_events.5
		10 = healthcare_laws.2
		10 = healthcare_laws.5
		10 = anti_state_religion.2
		10 = colonization.4
		10 = distribution_of_power_laws.8
		10 = distribution_of_power_laws.11
		10 = rights_of_women_laws.4
		10 = rights_of_women_laws.7
		10 = law_events.1
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.5
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = agitators_law_events.13
		10 = agitators_law_events.18
		10 = agitators_law_events.20
		10 = state_atheism.1
		10 = state_atheism.5
		2 = generic_laws.3
		2 = generic_laws.6
		2 = generic_laws.9
		2 = generic_laws.12
		10 = ig_petitions.1 #Landowners want to reverse Suffrage
		10 = ig_petitions.10 #Rural folk want no conscription
		10 = ig_petitions.13 #Trade Unions want compulsory primary school
		20 = ig_petitions.16 #Industrialists want no graduated taxes
		1 = law_notification.2
		10 = single_party_state.2
		10 = land_ownership_law_events.1
		10 = land_ownership_law_events.4
		10 = land_ownership_law_events.7
		10 = luddite_law_events.2
		10 = luddite_law_events.5
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.13
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.16
		10 = agitators_law_events.17
		10 = agitators_law_events.18
		10 = agitators_law_events.19
		10 = agitators_law_events.20
		10 = land_ownership_law_events.12
		10 = land_ownership_law_events.15
		10 = agitator_legal_events.11
		10 = agitator_legal_events.12
		10 = agitator_legal_events.13
		10 = agitator_legal_events.14
		10 = agitator_legal_events.15
		10 = agitator_legal_events.16
		10 = agitator_legal_events.17
		10 = agitator_legal_events.18
		10 = agitator_legal_events.19
		10 = agitator_legal_events.20
		10 = technocracy.3
		10 = corporate_state.2
		10 = corporate_state.5
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is stall
on_law_checkpoint_stall = {
	random_events = {
		10 = children_rights_events.3
		10 = free_speech_laws.3
		10 = free_speech_laws.4
		10 = labor_rights.3
		10 = labor_rights.6
		10 = children_rights_events.5
		10 = welfare_laws.3
		10 = welfare_laws.6
		10 = welfare_laws.10
		10 = migration_laws.3
		10 = migration_laws.6
		10 = bureaucracy.1
		10 = colonization.1
		10 = colonization.2
		10 = rights_of_women_laws.3
		10 = internal_security_events.1
		10 = slavery_law_events.3
		10 = slavery_law_events.6
		10 = laws_police.3
		10 = anarchy.1
		10 = tax.1
		10 = tax.4
		10 = theocracy.3
		10 = citizenship_laws.3
		10 = citizenship_laws.6
		10 = education_laws.3
		10 = education_laws.6
		10 = distribution_of_power_laws.3
		10 = council_republic_law_events.3
		10 = distribution_of_power_laws.6
		10 = monarchy_law_events.4
		10 = economy_laws.3
		10 = economy_laws.6
		10 = isolation.1
		10 = conscription_laws.3
		10 = republic_laws.3
		10 = internal_security_events.6
		10 = healthcare_laws.3
		10 = healthcare_laws.6
		10 = anti_state_religion.3
		10 = distribution_of_power_laws.9
		10 = distribution_of_power_laws.12
		10 = rights_of_women_laws.6
		10 = agitators_law_events.4
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.16
		10 = agitators_law_events.19
		10 = state_atheism.3
		10 = state_atheism.4
		10 = exiles_more_events.2
		2 = generic_laws.2
		2 = generic_laws.5
		2 = generic_laws.8
		2 = generic_laws.11
		1 = law_notification.3
		10 = single_party_state.3
		50 = single_party_state.4
		50 = single_party_state.5
		10 = land_ownership_law_events.3
		10 = land_ownership_law_events.6
		10 = land_ownership_law_events.9
		10 = luddite_law_events.3
		10 = luddite_law_events.6
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.4
		10 = agitators_law_events.5
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = land_ownership_law_events.10
		10 = land_ownership_law_events.11
		10 = land_ownership_law_events.14
		10 = land_ownership_law_events.17
		10 = land_ownership_law_events.18
		10 = agitator_legal_events.1
		10 = agitator_legal_events.2
		10 = agitator_legal_events.3
		10 = agitator_legal_events.4
		10 = agitator_legal_events.5
		10 = agitator_legal_events.6
		10 = agitator_legal_events.7
		10 = agitator_legal_events.8
		10 = agitator_legal_events.9
		10 = agitator_legal_events.10
		10 = technocracy.1
		10 = corporate_state.3
		10 = corporate_state.6
	}
}

# Root = owner Country of the Law
# Executed when an enacting law is passed by reaching the final enactment phase
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_pass = {
	effect = {
		if = {
			limit = {
				OR = {
					has_modifier = unrestricted_slave_trade_modifier
					has_modifier = restricted_slave_trade_modifier
					has_modifier = slave_shipments_intercepted_small
					has_modifier = slave_shipments_intercepted_large
				}
				has_law = law_type:law_slave_trade
				OR = {
					is_enacting_law = law_type:law_debt_slavery
					is_enacting_law = law_type:law_legacy_slavery
				}
			}
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment fails by accumulating too many setbacks
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_fail = {
	effect = {
		post_notification = enactment_failed
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
	effect = {
	}
}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {
	effect = {
		scope:target ?= {
			if = {
				limit = {
					has_law = law_type:law_single_party_state
				}
				handle_revolutionary_sps = yes
			}
		}
		if = {
			limit = {
				has_law = law_type:law_monarchy
				scope:target ?= {
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
			}
			set_variable = anti_monarchist_revolution
		}
		### Movement type variable setting
		ROOT = {
			random_civil_war = {
				limit = {
					is_civil_war_type = revolution
				}
				scope:target ?= {
					set_variable = { name = civil_war_type_var value = prev.political_movement.type }
				}
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
	effect = {
		
	}
}

# Root = Country
# scope:target = Uprising country
on_secession_start = {
}

# Root = Country
# scope:target = Uprising country
on_secession_end = {
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
	effect = {
		calculate_arcanas = yes
		if = {
			limit = {
				has_variable = anti_monarchist_revolution
			}
			if = {
				limit = {
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
				set_variable = {
					name = abolishing_monarchy_var
					value = 0
				}
				add_journal_entry = { type = je_abolish_monarchy }
			}
			remove_variable = anti_monarchist_revolution
		}
		if = {
			limit = {
				has_law = law_type:law_presidential_republic
				has_variable = revolutionary_prov_gov_var
			}
			trigger_event = { id = provisional_government_events.1 days = 7 popup = yes }
		}
		### Garbage collection
		if = {
			limit = {
				has_variable = civil_war_type_var
			}
			remove_variable = civil_war_type_var
		}

	}
	
}

on_revolution_checkpoint_reached = {
	effect = {
	}
	random_events = { #all these now have cooldowns of 50 years, you normally only get around 5-8 per revolution. 
		150 = 0 
		20 = ig_revolutions.1
		20 = ig_revolutions.2
		20 = ig_revolutions.3
		20 = ig_revolutions.4
		20 = ig_revolutions.5
		20 = ig_revolutions.6
		20 = ig_revolutions.7
		20 = ig_revolutions.8
		20 = ig_revolutions.9
		10 = revolution_pulse_events.1
		10 = revolution_pulse_events.2
		10 = revolution_pulse_events.3
		10 = revolution_pulse_events.4
		10 = revolution_pulse_events.5
		10 = revolution_pulse_events.7
		10 = revolution_pulse_events.8
		10 = revolution_pulse_events.9
		10 = revolution_pulse_events.10
		10 = revolution_pulse_events.11
		10 = revolution_pulse_events.12
		10 = revolution_pulse_events.13
		50 = revolution_pulse_events.14 #these have tighter conditions
		50 = revolution_pulse_events.15
		50 = revolution_pulse_events.16
		50 = revolution_pulse_events.17
		50 = revolution_pulse_events.18
		50 = revolution_pulse_events.19
		50 = revolution_pulse_events.20
		10 = revolution_pulse_events.21
		10 = revolution_pulse_events.22
		10 = revolution_pulse_events.23
		10 = revolution_pulse_events.24
		10 = revolution_pulse_events.25
		10 = revolution_pulse_events.26
		10 = revolution_pulse_events.27
		10 = revolution_pulse_events.28
		10 = revolution_pulse_events.29
		10 = revolution_pulse_events.30
		10 = revolution_pulse_events.31
		10 = revolution_pulse_events.32
		10 = revolution_pulse_events.33
		10 = revolution_pulse_events.34
		10 = revolution_pulse_events.35
		10 = revolution_pulse_events.36
		10 = revolution_pulse_events.37
		10 = revolution_pulse_events.38
		10 = revolution_pulse_events.39
		10 = revolution_pulse_events.40
		10 = revolution_pulse1_events.1
		10 = revolution_pulse1_events.2
		10 = revolution_pulse1_events.3
		10 = revolution_pulse1_events.4
		10 = revolution_pulse1_events.5
		10 = revolution_pulse1_events.6
		10 = revolution_pulse1_events.7
		10 = revolution_pulse1_events.8
		10 = revolution_pulse1_events.9
		10 = revolution_pulse1_events.10
		10 = revolution_pulse1_events.11
		10 = revolution_pulse1_events.12
		10 = revolution_pulse1_events.15
		10 = revolution_pulse1_events.16
		10 = revolution_pulse1_events.17
		10 = revolution_pulse1_events.18
		10 = revolution_pulse1_events.19
		10 = revolution_pulse2_events.1
		10 = revolution_pulse2_events.2
		10 = revolution_pulse2_events.3
		10 = revolution_pulse2_events.4
		10 = revolution_pulse2_events.5
		10 = revolution_pulse2_events.7
		10 = revolution_pulse2_events.9
		10 = revolution_pulse2_events.10
	}
}

on_secession_checkpoint_reached = {
	effect = {
	}
	random_events = {
		# Secession events and recycled revolution events
		30 = 0
		5 = secession_events.1
		5 = secession_events.2
		5 = secession_events.3
		5 = secession_events.4
		5 = secession_events.5
		5 = secession_events.6
		5 = secession_events.7
		5 = secession_events.8
		5 = secession_events.9
		5 = revolution_pulse_events.9
		5 = revolution_pulse_events.30
		5 = revolution_pulse1_events.2
		5 = revolution_pulse1_events.6
		5 = revolution_pulse1_events.11
		5 = revolution_pulse1_events.12
		5 = revolution_pulse1_events.15
		5 = revolution_pulse1_events.16
		5 = revolution_pulse1_events.17
		5 = revolution_pulse1_events.18
		5 = revolution_pulse1_events.19
		5 = revolution_pulse2_events.5
	}
}

# Root = Political Movement
on_political_movement_supported_law_cancelled = {
	effect = {
		add_modifier = {
			name = supported_law_cancelled
			months = 120
		}
	}
}

# Root = Country
# scope:target = the country the wargoal was enforced against
# scope:diplomatic_play = the relevant diplomatic play
# scope:wargoal_impact = the impact of the wargoal enforced
on_wargoal_enforced = {
	effect = {
		if = {
			limit = {
				OR = {
					AND = {
						has_journal_entry = je_anti_lobby_demand
						var:anti_lobby_demand_target ?= scope:target
					}
					AND = {
						has_journal_entry = je_pro_lobby_demand
						var:pro_lobby_demand_target ?= scope:target
					}
				}
			}
			set_variable = { name = enforced_wargoal_on_enemy days = 90 }
		}
		set_variable = {
            name = recently_won_war
            days = 1825
            value = yes
        }
		if = {
			limit = {
				scope:target ?= {
					has_journal_entry = je_earn_recognition
				}
			}
			scope:target ?= {
				set_variable = {
					name = temp_wargoal_impact
					value = {
						value = scope:wargoal_impact
						multiply = -4
					}
				}
				if = {
					limit = {
						has_variable = temp_wargoal_impact
					}
					je:je_earn_recognition ?= {
						add_progress = { value = owner.var:temp_wargoal_impact name = earn_recognition_progress_bar }
					}
				}
			}
		}
		if = {
			limit = {
				owner = {
					has_journal_entry = je_earn_recognition
				}
				scope:target ?= {
					OR = {
						is_country_type = recognized
						is_country_type = colonial
					}
					country_rank >= rank_value:major_power
				}
			}
			owner = {
				set_variable = {
					name = temp_wargoal_impact
					value = {
						value = scope:wargoal_impact
						multiply = 4
					}
				}
				if = {
					limit = {
						has_variable = temp_wargoal_impact
					}
					je:je_earn_recognition ?= {
						add_progress = { value = owner.var:temp_wargoal_impact name = earn_recognition_progress_bar }
					}
				}
			}
		}
	}
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
		if = {
			limit = {
				owner = {
					has_journal_entry = je_coup
				}
			}
			root = {
				set_variable = resigned_from_gov_coup
			}
		}
		if = {
			limit = {
				owner = {
					has_law = law_type:law_single_party_state
					any_active_party = {
						any_member = {
							is_in_government = no
							is_insurrectionary = yes
						}
					}
				}
			}
			owner = {
				trigger_event = { id = government_collapse.1 popup = yes }
			}
		}
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Country (that owns a state in the state region)
# scope:actor = Claimant country
# scope:region = State Region
on_claim_added = {
	effect = {
		post_notification = claim_added_notification
	}
}

# Root = Country (in which the company is established)
# scope:company = The company that was established
on_company_established = {
	effect = {
	}
}

# Root = Country (in which the company was disbanded)
# scope:company = The company that was disbanded
on_company_disbanded = {
	effect = {
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {
	effect = {
		trigger_event = { id = civil_war_events.1 days = 0 }
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
	effect = {
		scope:actor = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    }
		    #set_variable = { #Available to use whenever needed
		    #	name = most_recent_war_opponent
		    #	value = scope:target
		    #}
		}
		scope:target ?= {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    }
		    #set_variable = {
		    #	name = most_recent_war_opponent
		    #	value = scope:actor
		    #}

			if = {
				limit = {
					exists = c:RVC
					is_subject_of = c:RVC
					NOT = {
						has_law = law_type:law_debt_slavery
					}
				}
				activate_law = law_type:law_debt_slavery
			}
		}
	}
}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = journal entry
on_journal_entry_failed = {
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = country
# scope:area = harvest condition area
# scope:state = affected state with the highest intensity
# scope:duration = duration of the harvest condition in days
# scope:num_states = the number of affected states in the country
# scope:intensity = the highest intensity of the affected states
on_harvest_condition_started_in_country = {
	effect = {
		if = {
			limit = {
				scope:intensity > 3
			}
			post_notification = harvest_condition_started_in_country_important
		}
		else = {
			post_notification = harvest_condition_started_in_country
		}
		ROOT = {
			if = {
				limit = {
					any_scope_state = {
						state_region = {
							has_harvest_condition = thieves_guild
						}
					}
					NOT = {
						has_journal_entry = je_thieves_guild
					}
				}
				add_journal_entry = {
							type = je_thieves_guild 
				}
			}
		}

		if = {
			limit = {
				any_scope_state = {
					state_region = {
						has_harvest_condition = heptadrone_swarms_negative
					}
				}
				NOT = {
					has_journal_entry = je_heptadron_probs
			}
		}
			set_variable = heptadrone_swarms_variable
		}
	}
}

# Root = state
on_state_incorporation = {
	effect = {

	}
}
on_state_owner_change = {
	effect = {
		evaluate_and_assign_state_hub_dynamic_names = yes # All dynamic naming is handled by this scripted effect
		mutagen_vats_powerswitch = yes
	}
}

on_state_created = { 
	effect = { 
		evaluate_and_assign_state_hub_dynamic_names = yes # All dynamic naming is handled by this scripted effect
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Colony state
on_colony_created = {
	effect = {
		
	}
}


# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {

	}
}

# Root = Objective
on_sub_objective_completed = {
}

# Root = Objective
on_sub_objective_failed = {
}

# Root = Objective
on_objective_completed = {
	effect = {
		debug_log = "Objective completed"
	}
}

# Root = Country
# scope:target = Party created
on_party_created = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Created"
	}
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Disbanded"
	}
}

# Root = Country
on_election_campaign_start = {
	effect = {
		debug_log = "Election Campaign Started"
	}
}

# Root = Country
on_election_campaign_end = {
	effect = {
		debug_log = "Election Campaign Ended"
	}
}

# Root = Country
on_government_reformed = {
	effect = {
		# Government Petition
		set_variable = gov_petition_coin_toss
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	effect = {
		post_notification = obligation_owed_by_us_expired
	}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	effect = {
		post_notification = obligation_owed_to_us_expired
	}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}

# Root = Country
# scope:region - the sea region where the raid happened
on_enemy_convoys_raided = {
	effect = {
		post_notification = enemy_convoys_raided
	}
}

# Root = Country
# scope:region - the sea region where the raid happened
on_our_convoys_raided = {
	effect = {
		post_notification = our_convoys_raided
	}
}

# Root = Country
on_repudiate_obligation = {
	effect = {
		scope:target_country = {
			change_relations = { country = root value = -50 }
			hidden_effect = {
				random_list = {
					50 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}
						}
					}
					50 = {}
				}
			}
		}
		every_country = {
			limit = {
				NOT = { this = scope:target_country }
				root = { owes_obligation_to = prev }
			}
			change_relations = { country = root value = -30 }
			hidden_effect = {
				random_list = {
					25 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}
						}
					}
					75 = {}
				}
			}
		}
		hidden_effect = { # Should not stack the modifier
			if = {
				limit = { has_modifier = repudiated_obligation }
				remove_modifier = repudiated_obligation
			}
		}
		add_modifier = {
			name = repudiated_obligation
			days = normal_modifier_time
			is_decaying = yes
		}
	}
}

# Root = Character
on_character_recruitment = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_recruit_promote_commander
				}
				je:je_tutorial_recruit_promote_commander = {
					set_variable = {
						name = tut_commander_target
						value = root
					}
					set_variable = {
						name = tut_commander_target_initial_rank
						value = root.commander_rank
					}
				}
			}
		}
	}
}

# Root = country
on_become_subject = {
	effect = {
		every_scope_state = {
			evaluate_and_assign_state_hub_dynamic_names = yes # All dynamic naming is handled by this scripted effect
		}
	}
}

# Root = country
on_become_independent = {
	effect = {
		every_scope_state = {
			evaluate_and_assign_state_hub_dynamic_names = yes # All dynamic naming is handled by this scripted effect
		}
	}
}

# This on-action is triggered in cases where there is no overriding on_impose effect on a law type. In case an on_impose effect exists on the law type, this will NOT be executed.
# Root = country being imposed upon
# scope:initiator = country doing the imposition
# scope:law = law being imposed
on_impose_law = {
	effect = {
		add_modifier = {
			name = impose_law_cooldown
			multiplier = 365
			days = 365
			is_decaying = yes
		}
		scope:law = {
			save_scope_as = foreign_imposition_law
		}
		save_scope_as = country_imposed_upon
		scope:initiator = {
			post_notification = imposition_demand_sent
			save_scope_as = foreign_imposition_country
		}
		trigger_event = { id = law_imposition_events.1 days = 0 popup = yes }
	}
}

# This on-action is triggered every time a Power Bloc's Power Struggle starts.
# Root = Country that started the Power Struggle (other interesting scopes, such as Power Bloc leader, can be inferred from root)
on_power_bloc_struggle_started = {
	effect = {
		if = {
			limit = {
				is_player = yes
			}
			set_variable = achievement_im_the_captain_now_challanger_var
		}
	}
}

dragonblight_removinator = {
	effect = {
		if = {
			limit = {
				NOT = { c:DIS = this }
				any_scope_state = {
					has_modifier = modifier_active_dragonblight_outbreak
				}
			}
			every_scope_state = {
				remove_modifier = modifier_active_dragonblight_outbreak
			}
			
		}
	}
}

buramog_cleanup = {
	effect = {
		if = {
			limit = {
				NOT = { has_journal_entry = je_buramog_raids }
		}
			every_scope_state = {
				remove_modifier = buramog_wars_attacker
			}
		}
	}
}

sunstationinator = {
    effect = {
        if = {
            limit = {
                any_scope_building = {
                    is_building_type = building_sunstation
                }
            }

			if = {
				limit = {
					NOT = {
						has_variable = sunstation_progress_count
					}
				}
				set_variable = {
					name = sunstation_progress_count
					value = 0
				}
			}

			set_variable = {
                name = sunstation_growth
                value = modifier:state_sunstation_progress_add
            }

			set_variable = { 
				name = sunstation_growth_mult
				value = modifier:state_sunstation_progress_mult
			}

			change_variable = {
				name = sunstation_growth_mult
				add = 1
			}

			change_variable = {
				name = sunstation_growth
                multiply = var:sunstation_growth_mult
			}

			change_variable = {
                name = sunstation_progress_count
                add = var:sunstation_growth
            }
			

				if = {
					limit = {
						var:sunstation_progress_count > 500
					}
						state_region = {
							add_arable_land = 2 
					    }
						change_variable = {
							name = sunstation_progress_count
							subtract = 500
						}
					
					if = {
						limit = {
							NOT = {
								owner = { has_variable = sunstation_je_complete_1 }
							}
						}
						owner = {
							set_variable = sunstation_je_complete_1
						}
					}
					if = {
						limit = {
							has_state_trait = state_trait_permafrost
						}
						state_region = {
							remove_state_trait = state_trait_permafrost
							add_state_trait = state_trait_extreme_cold
						}
					}
					else_if = {
						limit = {
							has_state_trait = state_trait_extreme_cold
						}
						state_region = {
							remove_state_trait = state_trait_extreme_cold
							add_state_trait = state_trait_slight_chill
						}
					}

				}
		remove_variable = sunstation_growth_mult
		remove_variable = sunstation_growth
		
        }
    }
}

build_soulwrought = {
    effect = {
        if = {
            limit = {
                any_scope_building = {
                    is_building_type = building_soulwrought_assembly_plant
                }
            }

			if = {
				limit = {
					NOT = {
						has_variable = soulwrought_assemble_count
					}
				}
				set_variable = {
					name = soulwrought_assemble_count
					value = 0
				}
			}

			set_variable = {
                name = assembly
                value = modifier:state_soulwrought_assembled_add
            }

			set_variable = { 
				name = assembly_mult
				value = modifier:state_soulwrought_assembled_mult
			}

			change_variable = {
				name = assembly_mult
				add = 1
			}

			change_variable = {
				name = assembly
                multiply = var:assembly_mult
			}

			change_variable = {
                name = soulwrought_assemble_count
                add = var:assembly
            }


			
			if = {
				limit = {
					owner = {
						has_law = law_type:law_slavery_banned
					}
				}
				if = {
					limit = {
						var:soulwrought_assemble_count > 20000
						var:soulwrought_assemble_count < 40000
					}
					create_pop = {
						pop_type = laborers
						culture  = soulwrought
						literacy_rate = 0.3
						working_adult_ratio = 0.5
						size = 20000
					}
					change_variable = {
						name = soulwrought_assemble_count
						subtract = 20000
					}
				}
				else_if = {
					limit = {
						var:soulwrought_assemble_count >= 40000
						var:soulwrought_assemble_count < 60000
					}
					create_pop = {
						pop_type = laborers
						culture  = soulwrought
						literacy_rate = 0.3
						working_adult_ratio = 0.5
						size = 40000
					}
					change_variable = {
						name = soulwrought_assemble_count
						subtract = 40000
					}
				}

				else_if = {
					limit = {
						var:soulwrought_assemble_count >= 60000
					}
					create_pop = {
						pop_type = laborers
						culture  = soulwrought
						literacy_rate = 0.3
						working_adult_ratio = 0.5
						size = 60000
					}
					change_variable = {
						name = soulwrought_assemble_count
						subtract = 60000
					}
				}
			}
			else = {
				if = {
					limit = {
						var:soulwrought_assemble_count >= 20000
						var:soulwrought_assemble_count < 40000
					}
					create_pop = {
						pop_type = slaves
						culture  = soulwrought
						literacy_rate = 0.2
						working_adult_ratio = 0.5
						size = 20000
					}
					change_variable = {
						name = soulwrought_assemble_count
						subtract = 20000
					}
				}
				else_if = {
					limit = {
						var:soulwrought_assemble_count >= 20000
						var:soulwrought_assemble_count < 40000
					}
					create_pop = {
						pop_type = slaves
						culture  = soulwrought
						literacy_rate = 0.2
						working_adult_ratio = 0.5
						size = 40000
					}
					change_variable = {
						name = soulwrought_assemble_count
						subtract = 40000
					}
				}

				else_if = {
					limit = {
						var:soulwrought_assemble_count >= 60000
					}
					create_pop = {
						pop_type = slaves
						culture  = soulwrought
						literacy_rate = 0.2
						working_adult_ratio = 0.5
						size = 60000
					}
					change_variable = {
						name = soulwrought_assemble_count
						subtract = 60000
					}
				}
			}
		

			remove_variable = assembly

        }
    }
}

soulwrought_homelandinator = { #gives soulwrought homelands to any state with a soulwrought plant and >30% soulwrought population ##might replace this with an event that the player can see once we have some soulwrought event art, could also move to 5 year pulse?
	random_events = {
		20 = synthetic_dawn.1
	}
}

mutant_homelander = {
	random_events = {
		20 = mutant_mayhem.1
	}
}

mutant_homelander_2 = {
	random_events = {
		20 = mutant_mayhem.2
	}
}

diggy_diggy_dwarf = { #digs arcthar out of the ground
    effect = {
        if = {
            limit = {
                any_scope_building = {
					OR = {
						is_building_type = building_collapsed_godsbane_vault
						is_building_type = building_renovated_godsbane_vault
					}
                    
                }
            }

			if = {
				limit = {
					NOT = {
						has_variable = dwarf_digging_count
					}
				}
				set_variable = {
					name = dwarf_digging_count
					value = 0
				}
			}

			set_variable = {
                name = diggy_stone
                value = modifier:state_diggy_diggy_dwarf_add
            }

			set_variable = { 
				name = diggy_mult
				value = modifier:state_diggy_diggy_dwarf_mult
			}

			change_variable = {
				name = diggy_mult
				add = 1
			}
			change_variable = {
				name = diggy_stone
                multiply = var:diggy_mult
			}

			change_variable = {
                name = dwarf_digging_count
                add = var:diggy_stone
            }
			
			if = {
                limit = {
                    var:dwarf_digging_count > 10000
                }
                create_pop = {
                    pop_type = laborers
                    culture  = starwoken
					working_adult_ratio = 0.5
                    size = 10000
                }
                change_variable = {
					name = dwarf_digging_count
					subtract = 10000
				}
			}
			else_if = {
                limit = {
                    var:dwarf_digging_count > 20000
                }
                create_pop = {
                    pop_type = laborers
                    culture  = starwoken
					working_adult_ratio = 0.5
                    size = 20000
                }
                change_variable = {
					name = dwarf_digging_count
					subtract = 20000
				}
			}
			else_if = {
                limit = {
                    var:dwarf_digging_count > 30000
                }
                create_pop = {
                    pop_type = laborers
                    culture  = starwoken
					working_adult_ratio = 0.5
                    size = 30000
                }
                change_variable = {
					name = dwarf_digging_count
					subtract = 30000
				}
			}
		remove_variable = diggy_mult
		remove_variable = diggy_stone 
		}
    }
}

# This on-action is triggered every time a Power Bloc's Power Struggle concludes (after the changes in leadership have been made).
# Root = Power Bloc whose leadership position is being fought over
# scope:successful_contender = country that won the Power Struggle
# scope:failed_contender = country that lost the Power Struggle
on_power_bloc_struggle_ended = {
	effect = {
		if = {
			limit = {
				scope:successful_contender ?= {
					has_variable = achievement_im_the_captain_now_challanger_var
					is_player = yes
					NOT = { has_variable = achievement_im_the_captain_now }
				}
			}
			scope:successful_contender = {
				set_variable = achievement_im_the_captain_now
			}
		}
		if = {
			limit = {
				scope:successful_contender ?= {
					has_variable = achievement_im_the_captain_now_challanger_var
				}
			}
			scope:successful_contender = {
				remove_variable = achievement_im_the_captain_now_challanger_var
			}
		}
		if = {
			limit = {
				scope:failed_contender ?= {
					has_variable = achievement_im_the_captain_now_challanger_var
				}
			}
			scope:failed_contender = {
				remove_variable = achievement_im_the_captain_now_challanger_var
			}
		}
	}
}

# Root = Military Formation
# scope:front = front we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_to_front_cancelled = {
	effect = {
		post_notification = formation_travel_to_front_cancelled
	}
}

# Root = Military Formation
# scope:hq = HQ we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_station_in_hq_cancelled = {
	effect = {
		post_notification = formation_travel_station_in_hq_cancelled
	}
}

# Root = Military Formation
# scope:province = Sea Node we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_deploy_to_sea_node_cancelled  = {
	effect = {
		post_notification = formation_travel_deploy_to_sea_node_cancelled
	}
}

# Root = Military Formation
# scope:formation = Formation we were tracking
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_track_formation_cancelled = {
	effect = {
		post_notification = formation_travel_track_formation_cancelled
	}
}

# Root = Military Formation
on_military_formation_created = {
	effect = {
		if = {
			limit = {
				owner = {
					has_journal_entry = je_tutorial_create_formation
				}
			}
			owner = {
				remove_variable = formation_tutorial_ongoing
			}
		}
	}
}


pop_auto_assimilate = {
	effect = {
		every_scope_pop = {
			if = {
				limit = {
					pop_acceptance < acceptance_status_5
					total_size <= 1000
				}
				owner = {
					ordered_primary_culture = {
						position = 0
						save_scope_as = primary_culture_scope
					}
					religion = {
						save_scope_as = primary_religion_scope
					}
				}
				
				change_pop_culture = { target = scope:primary_culture_scope value = 1 }
				change_pop_religion = { target = scope:primary_religion_scope value = 1 }
			}
		}
	}
}